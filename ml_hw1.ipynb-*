{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/jWA3QsmNy9A2CnkQV2mR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Berendej/ml_hw1/blob/main/ml_hw1.ipynb-*\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FJsBAQymp0RW"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Пользователь вводит пятизначное число. Программа должна зеркально\n",
        "отразить центральные три цифры. Первая и последняя остаются на местах.\n",
        "Пример:\n",
        "23456 -> 25436\n",
        "30789 -> 38709"
      ],
      "metadata": {
        "id": "5J_jadvbp1-2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "\n",
        "# [start:end:step]\n",
        "v = \"12345\"\n",
        "v = input(\"enter 5 digits number :\")\n",
        "if ( 5 != len(v) ):\n",
        "    print( \"wrong input\" )\n",
        "    sys.exit(-1)\n",
        "\n",
        "v3 = v[0] + v[3:0:-1] + v[4]\n",
        "print(v3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8OCHaKcPp6Nx",
        "outputId": "ad6bacd9-5a35-4fdb-e235-a4df97da26e8"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter 5 digits number :12345\n",
            "14325\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Пользователь вводит данные, проверить - являются ли они положительным\n",
        "вещественным числом. Не использовать встроенные функции для проверки,\n",
        "только методы данных и конструкцию IF. (Дополнительное задание,\n",
        "по желанию - проверка на отрицательные вещественные числа)\n",
        "\n",
        "Пример:\n",
        "5.6 -> True\n",
        ".78 -> True\n",
        ".67. -> False\n",
        "5 -> True"
      ],
      "metadata": {
        "id": "HZTfvo-C-asq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def is_digit(c):\n",
        "    if ( c >= '0' and c <= '9' ):\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "def is_float(s):\n",
        "    state = 0\n",
        "    for c in s:\n",
        "        if (0 == state): # state0 : [-, digit, dot] allowed\n",
        "            if ('-' == c):\n",
        "                state = 1\n",
        "            elif('.' == c ):\n",
        "                state = 2\n",
        "            else:\n",
        "                if (not is_digit(c)):\n",
        "                    return False\n",
        "\n",
        "        elif(1 == state): # state1 [digit, dot] allowed\n",
        "            if ( '.' == c ):\n",
        "                state = 2\n",
        "            elif (not is_digit(c)):\n",
        "                return False\n",
        "\n",
        "        elif(2 == state): # state2 [digit] allowed\n",
        "            if (not is_digit(c)):\n",
        "                return False\n",
        "    return True\n",
        "\n",
        "s = input(\"enter number or whatever: \")\n",
        "print ( is_float(s))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kgb9ZIVi-icO",
        "outputId": "3ba8683a-1ec6-4f09-f16b-26d29616aaf0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter number or whatever: 1.3\n",
            "True\n"
          ]
        }
      ]
    }
  ]
}